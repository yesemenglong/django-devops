[global]
# 全局配置
# salt-api地址
SITE_SALT_API_URL = https://192.168.123.130:8080
# salt-api用户
SITE_SALT_API_NAME = saltapi
# salt-api密码
SITE_SALT_API_PWD = 123456
# salt-api的token，不需要填写
SITE_SALT_API_TOKEN =
# salt服务端安装的minion的id，服务端也要安装一下minion，有很多用到的时候
SITE_SALT_MASTER = 192.168.123.130-master
# salt服务端IP，salt-ssh等调用
SITE_SALT_MASTER_IP = 192.168.123.130
# web端宿主机的minion id
SITE_WEB_MINION = 192.168.123.130-master
# rsync服务端的宿主机minion id，发布系统的检出文件存放在rsync服务器里，如rsync服务是在master机子上salt自带的同步才能用，为了
# 解耦发布系统取消salt同步只保留rsync同步
SITE_RSYNC_MINION = 192.168.123.130-master
# 发布系统中随机生成svn/git目录的路径和名字前缀，这里是xiaopgg作为前缀嘿嘿
# 在views.py里后面加上当前时间来组成完整的目录路径，千万别出现中文因为py2版salt中文支持不好，出现中文后同步文件时目录可以同步文件不同步过去反而全被删除！！
SITE_BASE_CO_PATH = /data/xpgg_co/xpgg
# 在用salt同步文件过程中发如果salt的master配置文件中的file_roots定义的svn目录内文件太多会非常的慢
# 所以使用的软连接的方式同步完删除软连接来保持file_roots目录的整洁，这个目录要在master配置文件中也定义名称为xpgg指定目录和下面一样。不推荐！！
SITE_BASE_CO_SYMLINK_PATH = /data/xpgg_symlink/
# 文件服务使用的临时目录
SITE_BASE_TMP_PATH = /data/xpgg_tmp/
# 文件服务器rsync的内网ip和端口
SITE_RSYNC_IP = 192.168.123.130
SITE_RSYNC_PORT = 873
# web服务器rsync的内网ip和端口,如果rsync服务器和web服务器不是同一台，则web服务器也需要开启rsync的daemon用来给文件服务的上传更新使用
SITE_WEB_RSYNC_IP = 192.168.123.130
SITE_WEB_RSYNC_PORT = 873
# 限制上传更新等文件最大值
SITE_MAX_FILE_SIZE = 5242880
# 是否只允许单用户单一地点登录(只有一个人在线上)(默认多地点登录),只针对后台用户生效
IS_SINGLE_TOKEN = False 
# 微服务前端接口前缀
FRONTEND_API_LIST = ['/api/app/','/api/xcx/','/api/h5/']
# pillar路径
SITE_SALT_PILLAR = /data/salt/pillar/game.sls

[redis]
# IP
REDIS_HOST_NAME = 172.19.19.20
# 密码
REDIS_PASSWORD = 123456
# 端口
REDIS_PORT = 6379


[mysql]
# IP
MYSQL_HOST_NAME = 172.19.19.30
# 用户
MYSQL_USER = root
# 密码
MYSQL_PASSWORD = 123456
# 数据库名
MYSQL_DB_NAME = test
# 端口
MYSQL_PORT = 3306
# 数据库编码
DATABASE_CHARSET = "utf8mb4"
# 数据库长连接时间（默认为0，单位秒）即每次请求都重新连接,debug模式下该值应该写为0 ，mysql默认长连接超时时间为8小时
DATABASE_CONN_MAX_AGE = 0 #推荐120（2分钟），使用 None 则是无限的持久连接（不推荐）。

